# -*- coding: utf-8 -*-
"""Fisica de semiconductores.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y6P3RH6G-NkssO_JAgaAo-BDssRLoYYJ
"""

import numpy as np
import matplotlib.pyplot as plt

def calcular_resistencia(T_C, Na, Nd, material, I0_lux, A, L):
    q = 1.6e-19
    kB = 1.38e-23
    h = 6.626e-34
    c = 3e8
    m0 = 9.109e-31
    T0 = 300
    gamma = 2.5
    T = T_C + 273.15
    I0 = I0_lux * 0.0079

    materiales = {
        "CdS": {"Eg": 2.38 * q, "alpha": 2e4, "lambda": 500e-9, "x": 100e-9, "tao": 2e-7, "mun": 75, "mup": 3, "me": 0.2, "mh": 0.8},
        "CdSe": {"Eg": 1.74 * q, "alpha": 1e4, "lambda": 720e-9, "x": 1e-6, "tao": 17.9e-9, "mun": 400, "mup": 7, "me": 0.13, "mh": 0.45}
    }

    params = materiales.get(material)
    if not params:
        raise ValueError("Material no reconocido. Use 'CdS' o 'CdSe'")

    Eg, alpha, lambda_, x, tao, mun, mup, me, mh = params.values()

    mun = (mun * 1e-4) * (T / T0) ** -gamma
    mup = (mup * 1e-4) * (T / T0) ** -gamma

    Nc = 2 * ((2 * np.pi * me * m0 * kB * T) / h**2)**(3/2)
    Nv = 2 * ((2 * np.pi * mh * m0 * kB * T) / h**2)**(3/2)
    ni = np.sqrt(Nc * Nv) * np.exp(-Eg / (2 * kB * T))

    if Na == 0 and Nd == 0:
        n0 = p0 = ni
    elif Na == Nd:
        n0 = p0 = ni
    elif Nd > ni:
        n0 = Nd
        p0 = ni**2 / n0
    elif Na > ni:
        p0 = Na
        n0 = ni**2 / p0
    elif Nd > Na:
        n0 = Nd - Na
        p0 = ni**2 / n0
    else:
        p0 = Na - Nd
        n0 = ni**2 / p0

    sigma_oscuridad = q * (mun * n0 + mup * p0)
    resistencia_oscuridad = float('inf') if sigma_oscuridad == 0 else L / (sigma_oscuridad * A)

    delta_n = ((alpha * I0 * np.exp(-alpha * x)) / ((h * c) / lambda_)) * tao
    delta_p = delta_n

    sigma_luz = q * ((mun * (n0 + delta_n)) + (mup * (p0 + delta_p)))
    resistencia_luz = float('inf') if sigma_luz == 0 else L / (sigma_luz * A)

    return resistencia_oscuridad, resistencia_luz

while True:
    T_C = float(input("Ingrese la temperatura (°C) [-30 a 80]: "))
    if -30 <= T_C <= 80:
        break
    else:
        print("⚠️ Error: La temperatura debe estar entre -30 y 80 °C. Intente nuevamente.")

Na = float(input("Ingrese la concentración de aceptores (1/cm^3): "))
Nd = float(input("Ingrese la concentración de donadores (1/cm^3): "))
material = input("Ingrese el material (CdS o CdSe): ")

while True:
    A = float(input("Ingrese el área del fotoresistor en m² [1e-6 a 1e-4]: "))
    if 1e-6 <= A <= 1e-4:
        break
    else:
        print("⚠️ Error: El área debe estar entre 1e-6 m² y 1e-4 m². Intente nuevamente.")

while True:
    L = float(input("Ingrese la longitud del fotoresistor en m [1e-4 a 1e-2]: "))
    if 1e-4 <= L <= 1e-2:
        break
    else:
        print("⚠️ Error: La longitud debe estar entre 1e-4 m y 1e-2 m. Intente nuevamente.")

while True:
    I0_lux = float(input("Ingrese la intensidad luminosa en lux [1 a 100]: "))
    if 1 <= I0_lux <= 100:
        break
    else:
        print("⚠️ Error: La intensidad luminosa debe estar entre 1 y 100 lux. Intente nuevamente.")

resistencia_oscuridad, resistencia_luz = calcular_resistencia(T_C, Na, Nd, material, I0_lux, A, L)
print(f"\nResistencia en la oscuridad: {resistencia_oscuridad:.4e} Ω")
print(f"Resistencia con iluminación de {I0_lux} lux: {resistencia_luz:.4e} Ω")

intensidades = np.linspace(0, 100, 100)
resistencias_luz = [calcular_resistencia(T_C, Na, Nd, material, I, A, L)[1] for I in intensidades]

fig, ax = plt.subplots(1, 2, figsize=(12, 5))

R_ref, _ = calcular_resistencia(25, Na, Nd, material, 0, A, L)

temperaturas = np.linspace(-30, 80, 100)
resistencias_temp = [calcular_resistencia(T, Na, Nd, material, 0, A, L)[0] for T in temperaturas]
variacion_resistencia = [(R / R_ref) * 100 for R in resistencias_temp]

ax[0].plot(temperaturas, variacion_resistencia, 'k-', linewidth=2)
ax[0].set_xlabel("Temperatura (°C)")
ax[0].set_ylabel("Resistencia (%)")
ax[0].set_title("Variación de la resistencia con la temperatura")
ax[0].grid(True)

ax[1].plot(intensidades, resistencias_luz, 'r-')
ax[1].set_xlabel("Intensidad luminosa (lux)")
ax[1].set_ylabel("Resistencia (Ω)")
ax[1].set_title("Variación de la Resistencia con la Iluminación")
ax[1].set_yscale("log")
ax[1].set_xscale("log")
ax[1].grid(True)

plt.tight_layout()
plt.show()